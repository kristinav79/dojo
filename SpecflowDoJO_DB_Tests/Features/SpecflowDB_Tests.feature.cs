// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecflowDoJO_DB_Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SpecflowDojo_DBExampleTestsToTestDataLoadToTableDbo_CustomerAndDerivationsInTableDbo_CustomerProfileFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "SpecflowDB_Tests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SpecflowDojo_DB example tests to test data load to table dbo.Customer and derivat" +
                    "ions in table dbo.CustomerProfile", @" We will test simple database solution which is currently deployed on PLLWINMXCMFM1\DOJO,24212, Database name SpecFlowDojo_DB_X (X - number of your designated database).
 Solution has 3 load procedures (for loading data from Staging tables to base tables) and 2 data derivation procedures. 
 More information on database solution can be found in document ""Specflow Dojo Database description.doc""", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "SpecflowDojo_DB example tests to test data load to table dbo.Customer and derivat" +
                            "ions in table dbo.CustomerProfile")))
            {
                global::SpecflowDoJO_DB_Tests.Features.SpecflowDojo_DBExampleTestsToTestDataLoadToTableDbo_CustomerAndDerivationsInTableDbo_CustomerProfileFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Procedure dbo.usp_CustomerLoad - Test load data from staging to base table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SpecflowDojo_DB example tests to test data load to table dbo.Customer and derivat" +
            "ions in table dbo.CustomerProfile")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("exampleScenario")]
        public virtual void ProcedureDbo_Usp_CustomerLoad_TestLoadDataFromStagingToBaseTable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Procedure dbo.usp_CustomerLoad - Test load data from staging to base table", new string[] {
                        "exampleScenario"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "TableName"});
            table1.AddRow(new string[] {
                        "dbo.Staging_Customer"});
            table1.AddRow(new string[] {
                        "dbo.Customer"});
#line 9
 testRunner.Given("below tables are clean", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerID",
                        "FirstName",
                        "LastName",
                        "PhoneNumber",
                        "RegistrationDate"});
            table2.AddRow(new string[] {
                        "1",
                        "John",
                        "Smith",
                        "",
                        "2017-09-12"});
            table2.AddRow(new string[] {
                        "2",
                        "Sara",
                        "Smith",
                        "",
                        "2017-09-13"});
            table2.AddRow(new string[] {
                        "2",
                        "Sara",
                        "Wilkinson",
                        "",
                        "2017-09-11"});
#line 13
 testRunner.And("I insert data into table dbo.Staging_Customer", ((string)(null)), table2, "And ");
#line 18
 testRunner.When("I execute procedure dbo.usp_CustomerLoad", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("the count in table dbo.Customer should be equal to 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Procedure dbo.usp_CustomerProfile - Test CustomerProfile TotalOrderCount derivati" +
            "on")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SpecflowDojo_DB example tests to test data load to table dbo.Customer and derivat" +
            "ions in table dbo.CustomerProfile")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("exampleScenario")]
        public virtual void ProcedureDbo_Usp_CustomerProfile_TestCustomerProfileTotalOrderCountDerivation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Procedure dbo.usp_CustomerProfile - Test CustomerProfile TotalOrderCount derivati" +
                    "on", new string[] {
                        "exampleScenario"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "TableName"});
            table3.AddRow(new string[] {
                        "dbo.Customer"});
            table3.AddRow(new string[] {
                        "dbo.Orders"});
            table3.AddRow(new string[] {
                        "dbo.CustomerProfile"});
#line 23
 testRunner.Given("below tables are clean", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerID",
                        "FirstName",
                        "LastName",
                        "PhoneNumber",
                        "RegistrationDate"});
            table4.AddRow(new string[] {
                        "1",
                        "John",
                        "Smith",
                        "",
                        "2017-09-12"});
            table4.AddRow(new string[] {
                        "2",
                        "Sara",
                        "Wilkinson",
                        "",
                        "2017-09-12"});
#line 28
 testRunner.And("I insert data into table dbo.Customer", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "OrderID",
                        "CustomerID",
                        "OrderDate",
                        "OrderStatus",
                        "ShippedDate"});
            table5.AddRow(new string[] {
                        "11",
                        "1",
                        "2017-09-12",
                        "Complete",
                        "2017-09-13"});
            table5.AddRow(new string[] {
                        "12",
                        "2",
                        "2017-09-12",
                        "Ready",
                        ""});
            table5.AddRow(new string[] {
                        "13",
                        "1",
                        "2017-09-13",
                        "Ready",
                        ""});
#line 32
 testRunner.And("insert data into table dbo.Orders", ((string)(null)), table5, "And ");
#line 37
 testRunner.When("I execute procedure dbo.usp_CustomerProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("TotalOrderCount in table dbo.CustomerProfile should be equal to 2 where CustomerI" +
                    "D is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
